// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace protocol {
class Edit;
class EditDefaultTypeInternal;
extern EditDefaultTypeInternal _Edit_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class LoginInfo;
class LoginInfoDefaultTypeInternal;
extern LoginInfoDefaultTypeInternal _LoginInfo_default_instance_;
class Statement;
class StatementDefaultTypeInternal;
extern StatementDefaultTypeInternal _Statement_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::Edit* Arena::CreateMaybeMessage<::protocol::Edit>(Arena*);
template<> ::protocol::Header* Arena::CreateMaybeMessage<::protocol::Header>(Arena*);
template<> ::protocol::Key* Arena::CreateMaybeMessage<::protocol::Key>(Arena*);
template<> ::protocol::LoginInfo* Arena::CreateMaybeMessage<::protocol::LoginInfo>(Arena*);
template<> ::protocol::Statement* Arena::CreateMaybeMessage<::protocol::Statement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum Header_MsgType : int {
  Header_MsgType_LOGIN = 0,
  Header_MsgType_STATEMENT = 1,
  Header_MsgType_EDIT = 2,
  Header_MsgType_PUBLIC_KEY = 3
};
bool Header_MsgType_IsValid(int value);
constexpr Header_MsgType Header_MsgType_MsgType_MIN = Header_MsgType_LOGIN;
constexpr Header_MsgType Header_MsgType_MsgType_MAX = Header_MsgType_PUBLIC_KEY;
constexpr int Header_MsgType_MsgType_ARRAYSIZE = Header_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_MsgType_descriptor();
template<typename T>
inline const std::string& Header_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Header_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Header_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Header_MsgType_descriptor(), enum_t_value);
}
inline bool Header_MsgType_Parse(
    const std::string& name, Header_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Header_MsgType>(
    Header_MsgType_descriptor(), name, value);
}
enum Statement_Info : int {
  Statement_Info_KEEP_ALIVE = 0,
  Statement_Info_REQUEST_LOGIN = 1,
  Statement_Info_LOGIN_ACCEPTED = 2,
  Statement_Info_LOGIN_REJECTED = 3,
  Statement_Info_LOG_OUT = 4,
  Statement_Info_WORK_END = 5,
  Statement_Info_PUBLIC_KEY_REQUEST = 6
};
bool Statement_Info_IsValid(int value);
constexpr Statement_Info Statement_Info_Info_MIN = Statement_Info_KEEP_ALIVE;
constexpr Statement_Info Statement_Info_Info_MAX = Statement_Info_PUBLIC_KEY_REQUEST;
constexpr int Statement_Info_Info_ARRAYSIZE = Statement_Info_Info_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Statement_Info_descriptor();
template<typename T>
inline const std::string& Statement_Info_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Statement_Info>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Statement_Info_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Statement_Info_descriptor(), enum_t_value);
}
inline bool Statement_Info_Parse(
    const std::string& name, Statement_Info* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Statement_Info>(
    Statement_Info_descriptor(), name, value);
}
enum Key_KeyType : int {
  Key_KeyType_SYMMETRIC = 0,
  Key_KeyType_PUBLIC = 1
};
bool Key_KeyType_IsValid(int value);
constexpr Key_KeyType Key_KeyType_KeyType_MIN = Key_KeyType_SYMMETRIC;
constexpr Key_KeyType Key_KeyType_KeyType_MAX = Key_KeyType_PUBLIC;
constexpr int Key_KeyType_KeyType_ARRAYSIZE = Key_KeyType_KeyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Key_KeyType_descriptor();
template<typename T>
inline const std::string& Key_KeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Key_KeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Key_KeyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Key_KeyType_descriptor(), enum_t_value);
}
inline bool Key_KeyType_Parse(
    const std::string& name, Key_KeyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Key_KeyType>(
    Key_KeyType_descriptor(), name, value);
}
// ===================================================================

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Header_MsgType MsgType;
  static constexpr MsgType LOGIN =
    Header_MsgType_LOGIN;
  static constexpr MsgType STATEMENT =
    Header_MsgType_STATEMENT;
  static constexpr MsgType EDIT =
    Header_MsgType_EDIT;
  static constexpr MsgType PUBLIC_KEY =
    Header_MsgType_PUBLIC_KEY;
  static inline bool MsgType_IsValid(int value) {
    return Header_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    Header_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    Header_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    Header_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return Header_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return Header_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(const std::string& name,
      MsgType* value) {
    return Header_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgLengthFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
  };
  // required int32 msgLength = 1;
  bool has_msglength() const;
  private:
  bool _internal_has_msglength() const;
  public:
  void clear_msglength();
  ::PROTOBUF_NAMESPACE_ID::int32 msglength() const;
  void set_msglength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msglength() const;
  void _internal_set_msglength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .protocol.Header.MsgType msgType = 2;
  bool has_msgtype() const;
  private:
  bool _internal_has_msgtype() const;
  public:
  void clear_msgtype();
  ::protocol::Header_MsgType msgtype() const;
  void set_msgtype(::protocol::Header_MsgType value);
  private:
  ::protocol::Header_MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::protocol::Header_MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 msglength_;
  int msgtype_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class LoginInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.LoginInfo) */ {
 public:
  LoginInfo();
  virtual ~LoginInfo();

  LoginInfo(const LoginInfo& from);
  LoginInfo(LoginInfo&& from) noexcept
    : LoginInfo() {
    *this = ::std::move(from);
  }

  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginInfo& operator=(LoginInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginInfo* internal_default_instance() {
    return reinterpret_cast<const LoginInfo*>(
               &_LoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginInfo& a, LoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginInfo* New() const final {
    return CreateMaybeMessage<LoginInfo>(nullptr);
  }

  LoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginInfo& from);
  void MergeFrom(const LoginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.LoginInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // required string login = 1;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // required string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:protocol.LoginInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Statement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Statement) */ {
 public:
  Statement();
  virtual ~Statement();

  Statement(const Statement& from);
  Statement(Statement&& from) noexcept
    : Statement() {
    *this = ::std::move(from);
  }

  inline Statement& operator=(const Statement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statement& operator=(Statement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statement* internal_default_instance() {
    return reinterpret_cast<const Statement*>(
               &_Statement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Statement& a, Statement& b) {
    a.Swap(&b);
  }
  inline void Swap(Statement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statement* New() const final {
    return CreateMaybeMessage<Statement>(nullptr);
  }

  Statement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statement& from);
  void MergeFrom(const Statement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Statement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Statement_Info Info;
  static constexpr Info KEEP_ALIVE =
    Statement_Info_KEEP_ALIVE;
  static constexpr Info REQUEST_LOGIN =
    Statement_Info_REQUEST_LOGIN;
  static constexpr Info LOGIN_ACCEPTED =
    Statement_Info_LOGIN_ACCEPTED;
  static constexpr Info LOGIN_REJECTED =
    Statement_Info_LOGIN_REJECTED;
  static constexpr Info LOG_OUT =
    Statement_Info_LOG_OUT;
  static constexpr Info WORK_END =
    Statement_Info_WORK_END;
  static constexpr Info PUBLIC_KEY_REQUEST =
    Statement_Info_PUBLIC_KEY_REQUEST;
  static inline bool Info_IsValid(int value) {
    return Statement_Info_IsValid(value);
  }
  static constexpr Info Info_MIN =
    Statement_Info_Info_MIN;
  static constexpr Info Info_MAX =
    Statement_Info_Info_MAX;
  static constexpr int Info_ARRAYSIZE =
    Statement_Info_Info_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Info_descriptor() {
    return Statement_Info_descriptor();
  }
  template<typename T>
  static inline const std::string& Info_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Info>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Info_Name.");
    return Statement_Info_Name(enum_t_value);
  }
  static inline bool Info_Parse(const std::string& name,
      Info* value) {
    return Statement_Info_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // required .protocol.Statement.Info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  ::protocol::Statement_Info info() const;
  void set_info(::protocol::Statement_Info value);
  private:
  ::protocol::Statement_Info _internal_info() const;
  void _internal_set_info(::protocol::Statement_Info value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Statement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int info_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Edit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Edit) */ {
 public:
  Edit();
  virtual ~Edit();

  Edit(const Edit& from);
  Edit(Edit&& from) noexcept
    : Edit() {
    *this = ::std::move(from);
  }

  inline Edit& operator=(const Edit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edit& operator=(Edit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edit* internal_default_instance() {
    return reinterpret_cast<const Edit*>(
               &_Edit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Edit& a, Edit& b) {
    a.Swap(&b);
  }
  inline void Swap(Edit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edit* New() const final {
    return CreateMaybeMessage<Edit>(nullptr);
  }

  Edit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edit& from);
  void MergeFrom(const Edit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Edit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required string data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:protocol.Edit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Key_KeyType KeyType;
  static constexpr KeyType SYMMETRIC =
    Key_KeyType_SYMMETRIC;
  static constexpr KeyType PUBLIC =
    Key_KeyType_PUBLIC;
  static inline bool KeyType_IsValid(int value) {
    return Key_KeyType_IsValid(value);
  }
  static constexpr KeyType KeyType_MIN =
    Key_KeyType_KeyType_MIN;
  static constexpr KeyType KeyType_MAX =
    Key_KeyType_KeyType_MAX;
  static constexpr int KeyType_ARRAYSIZE =
    Key_KeyType_KeyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KeyType_descriptor() {
    return Key_KeyType_descriptor();
  }
  template<typename T>
  static inline const std::string& KeyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyType_Name.");
    return Key_KeyType_Name(enum_t_value);
  }
  static inline bool KeyType_Parse(const std::string& name,
      KeyType* value) {
    return Key_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kKeyTypeFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required .protocol.Key.KeyType keyType = 1;
  bool has_keytype() const;
  private:
  bool _internal_has_keytype() const;
  public:
  void clear_keytype();
  ::protocol::Key_KeyType keytype() const;
  void set_keytype(::protocol::Key_KeyType value);
  private:
  ::protocol::Key_KeyType _internal_keytype() const;
  void _internal_set_keytype(::protocol::Key_KeyType value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Key)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int keytype_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// required int32 msgLength = 1;
inline bool Header::_internal_has_msglength() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_msglength() const {
  return _internal_has_msglength();
}
inline void Header::clear_msglength() {
  msglength_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::_internal_msglength() const {
  return msglength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::msglength() const {
  // @@protoc_insertion_point(field_get:protocol.Header.msgLength)
  return _internal_msglength();
}
inline void Header::_internal_set_msglength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  msglength_ = value;
}
inline void Header::set_msglength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msglength(value);
  // @@protoc_insertion_point(field_set:protocol.Header.msgLength)
}

// required .protocol.Header.MsgType msgType = 2;
inline bool Header::_internal_has_msgtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_msgtype() const {
  return _internal_has_msgtype();
}
inline void Header::clear_msgtype() {
  msgtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protocol::Header_MsgType Header::_internal_msgtype() const {
  return static_cast< ::protocol::Header_MsgType >(msgtype_);
}
inline ::protocol::Header_MsgType Header::msgtype() const {
  // @@protoc_insertion_point(field_get:protocol.Header.msgType)
  return _internal_msgtype();
}
inline void Header::_internal_set_msgtype(::protocol::Header_MsgType value) {
  assert(::protocol::Header_MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  msgtype_ = value;
}
inline void Header::set_msgtype(::protocol::Header_MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:protocol.Header.msgType)
}

// -------------------------------------------------------------------

// LoginInfo

// required string login = 1;
inline bool LoginInfo::_internal_has_login() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginInfo::has_login() const {
  return _internal_has_login();
}
inline void LoginInfo::clear_login() {
  login_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginInfo::login() const {
  // @@protoc_insertion_point(field_get:protocol.LoginInfo.login)
  return _internal_login();
}
inline void LoginInfo::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:protocol.LoginInfo.login)
}
inline std::string* LoginInfo::mutable_login() {
  // @@protoc_insertion_point(field_mutable:protocol.LoginInfo.login)
  return _internal_mutable_login();
}
inline const std::string& LoginInfo::_internal_login() const {
  return login_.GetNoArena();
}
inline void LoginInfo::_internal_set_login(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginInfo::set_login(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.LoginInfo.login)
}
inline void LoginInfo::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LoginInfo.login)
}
inline void LoginInfo::set_login(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LoginInfo.login)
}
inline std::string* LoginInfo::_internal_mutable_login() {
  _has_bits_[0] |= 0x00000001u;
  return login_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginInfo::release_login() {
  // @@protoc_insertion_point(field_release:protocol.LoginInfo.login)
  if (!_internal_has_login()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return login_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginInfo::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:protocol.LoginInfo.login)
}

// required string password = 2;
inline bool LoginInfo::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginInfo::has_password() const {
  return _internal_has_password();
}
inline void LoginInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginInfo::password() const {
  // @@protoc_insertion_point(field_get:protocol.LoginInfo.password)
  return _internal_password();
}
inline void LoginInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:protocol.LoginInfo.password)
}
inline std::string* LoginInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:protocol.LoginInfo.password)
  return _internal_mutable_password();
}
inline const std::string& LoginInfo::_internal_password() const {
  return password_.GetNoArena();
}
inline void LoginInfo::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginInfo::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.LoginInfo.password)
}
inline void LoginInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LoginInfo.password)
}
inline void LoginInfo::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LoginInfo.password)
}
inline std::string* LoginInfo::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginInfo::release_password() {
  // @@protoc_insertion_point(field_release:protocol.LoginInfo.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:protocol.LoginInfo.password)
}

// -------------------------------------------------------------------

// Statement

// required .protocol.Statement.Info info = 1;
inline bool Statement::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Statement::has_info() const {
  return _internal_has_info();
}
inline void Statement::clear_info() {
  info_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protocol::Statement_Info Statement::_internal_info() const {
  return static_cast< ::protocol::Statement_Info >(info_);
}
inline ::protocol::Statement_Info Statement::info() const {
  // @@protoc_insertion_point(field_get:protocol.Statement.info)
  return _internal_info();
}
inline void Statement::_internal_set_info(::protocol::Statement_Info value) {
  assert(::protocol::Statement_Info_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  info_ = value;
}
inline void Statement::set_info(::protocol::Statement_Info value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:protocol.Statement.info)
}

// -------------------------------------------------------------------

// Edit

// required string data = 1;
inline bool Edit::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Edit::has_data() const {
  return _internal_has_data();
}
inline void Edit::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Edit::data() const {
  // @@protoc_insertion_point(field_get:protocol.Edit.data)
  return _internal_data();
}
inline void Edit::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protocol.Edit.data)
}
inline std::string* Edit::mutable_data() {
  // @@protoc_insertion_point(field_mutable:protocol.Edit.data)
  return _internal_mutable_data();
}
inline const std::string& Edit::_internal_data() const {
  return data_.GetNoArena();
}
inline void Edit::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Edit::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Edit.data)
}
inline void Edit::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Edit.data)
}
inline void Edit::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Edit.data)
}
inline std::string* Edit::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Edit::release_data() {
  // @@protoc_insertion_point(field_release:protocol.Edit.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Edit::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.Edit.data)
}

// -------------------------------------------------------------------

// Key

// required .protocol.Key.KeyType keyType = 1;
inline bool Key::_internal_has_keytype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Key::has_keytype() const {
  return _internal_has_keytype();
}
inline void Key::clear_keytype() {
  keytype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protocol::Key_KeyType Key::_internal_keytype() const {
  return static_cast< ::protocol::Key_KeyType >(keytype_);
}
inline ::protocol::Key_KeyType Key::keytype() const {
  // @@protoc_insertion_point(field_get:protocol.Key.keyType)
  return _internal_keytype();
}
inline void Key::_internal_set_keytype(::protocol::Key_KeyType value) {
  assert(::protocol::Key_KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  keytype_ = value;
}
inline void Key::set_keytype(::protocol::Key_KeyType value) {
  _internal_set_keytype(value);
  // @@protoc_insertion_point(field_set:protocol.Key.keyType)
}

// required string key = 2;
inline bool Key::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Key::has_key() const {
  return _internal_has_key();
}
inline void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:protocol.Key.key)
  return _internal_key();
}
inline void Key::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:protocol.Key.key)
}
inline std::string* Key::mutable_key() {
  // @@protoc_insertion_point(field_mutable:protocol.Key.key)
  return _internal_mutable_key();
}
inline const std::string& Key::_internal_key() const {
  return key_.GetNoArena();
}
inline void Key::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Key::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Key.key)
}
inline void Key::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Key.key)
}
inline void Key::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Key.key)
}
inline std::string* Key::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:protocol.Key.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protocol.Key.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::Header_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Header_MsgType>() {
  return ::protocol::Header_MsgType_descriptor();
}
template <> struct is_proto_enum< ::protocol::Statement_Info> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Statement_Info>() {
  return ::protocol::Statement_Info_descriptor();
}
template <> struct is_proto_enum< ::protocol::Key_KeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Key_KeyType>() {
  return ::protocol::Key_KeyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
